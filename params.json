{"name":"RiNOO","tagline":"(A)synchronous socket management","body":"# RiNOO\r\n[![Build Status](https://drone.io/github.com/reginaldl/librinoo/status.png)](https://drone.io/github.com/reginaldl/librinoo/latest)\r\n[![Coverity](https://scan.coverity.com/projects/2835/badge.svg)](https://scan.coverity.com/projects/2835)\r\n\r\nRiNOO is a socket management library. RiNOO sockets are asynchronous but \"appear\" synchronous.\r\nThis is possible by using fast-contexts (see fcontext project). Code looks simple. The complexity\r\nof asynchronous sockets is hidden.\r\nRiNOO is a simple way to create high scalability client/server applications.\r\n\r\n## Documentation\r\n\r\n* [Using librinoo for fun and profit](https://github.com/reginaldl/librinoo/wiki/Using-librinoo-for-fun-and-profit)\r\n* [Libevent vs. RiNOO](https://github.com/reginaldl/librinoo/wiki/Libevent-vs.-RiNOO)\r\n\r\n## Examples\r\n\r\n### Hello world!\r\n\r\n    #include \"rinoo/rinoo.h\"\r\n\r\n    void task_client(void *socket)\r\n    {\r\n    \tchar a;\r\n\r\n    \trinoo_socket_write(socket, \"Hello world!\\n\", 13);\r\n    \trinoo_socket_read(socket, &a, 1);\r\n    \trinoo_socket_destroy(socket);\r\n    }\r\n\r\n    void task_server(void *sched)\r\n    {\r\n    \tt_socket *server;\r\n    \tt_socket *client;\r\n\r\n    \tserver = rinoo_tcp_server(sched, IP_ANY, 4242);\r\n    \twhile ((client = rinoo_tcp_accept(server, NULL, NULL)) != NULL) {\r\n    \t\trinoo_task_start(sched, task_client, client);\r\n    \t}\r\n    \trinoo_socket_destroy(server);\r\n    }\r\n\r\n    int main()\r\n    {\r\n    \tt_sched *sched;\r\n\r\n    \tsched = rinoo_sched();\r\n    \trinoo_task_start(sched, task_server, sched);\r\n    \trinoo_sched_loop(sched);\r\n    \trinoo_sched_destroy(sched);\r\n    \treturn 0;\r\n    }\r\n\r\n### Multi-threading\r\n\r\n    #include \"rinoo/rinoo.h\"\r\n\r\n    void task_client(void *socket)\r\n    {\r\n    \tchar a;\r\n\r\n    \trinoo_socket_write(socket, \"Hello world!\\n\", 13);\r\n    \trinoo_socket_read(socket, &a, 1);\r\n    \trinoo_socket_destroy(socket);\r\n    }\r\n\r\n    void task_server(void *server)\r\n    {\r\n        t_sched *sched;\r\n    \tt_socket *client;\r\n\r\n        sched = rinoo_sched_self();\r\n    \twhile ((client = rinoo_tcp_accept(server, NULL, NULL)) != NULL) {\r\n                rinoo_log(\"Accepted connection on thread %d\", sched->id);\r\n                rinoo_task_start(sched, task_client, client);\r\n    \t}\r\n    \trinoo_socket_destroy(server);\r\n    }\r\n\r\n    int main()\r\n    {\r\n        int i;\r\n    \tt_sched *spawn;\r\n    \tt_sched *sched;\r\n    \tt_socket *server;\r\n\r\n    \tsched = rinoo_sched();\r\n    \tserver = rinoo_tcp_server(sched, IP_ANY, 4242);\r\n        /* Spawning 10 schedulers, each running in a separate thread */\r\n        rinoo_spawn(sched, 10);\r\n        for (i = 1; i <= 10; i++) {\r\n                spawn = rinoo_spawn_get(sched, i);\r\n                rinoo_task_start(spawn, task_server, rinoo_socket_dup(spawn, server));\r\n        }\r\n        rinoo_task_start(sched, task_server, server);\r\n    \trinoo_sched_loop(sched);\r\n    \trinoo_sched_destroy(sched);\r\n    \treturn 0;\r\n    }\r\n\r\n### HTTP\r\n\r\n    #include \"rinoo/rinoo.h\"\r\n\r\n    void http_client(void *sched)\r\n    {\r\n        t_http http;\r\n        t_socket *client;\r\n\r\n        client = rinoo_tcp_client(sched, IP_LOOPBACK, 80, 0);\r\n        rinoo_http_init(client, &http);\r\n        rinoo_http_request_send(&http, RINOO_HTTP_METHOD_GET, \"/\", NULL);\r\n        rinoo_http_response_get(&http);\r\n        rinoo_log(\"client - %.*s\", buffer_size(http.response.buffer), buffer_ptr(http.response.buffer));\r\n        rinoo_http_destroy(&http);\r\n        rinoo_socket_destroy(client);\r\n    }\r\n\r\n    int main()\r\n    {\r\n        t_sched *sched;\r\n\r\n        sched = rinoo_sched();\r\n        rinoo_task_start(sched, http_client, sched);\r\n        rinoo_sched_loop(sched);\r\n        rinoo_sched_destroy(sched);\r\n        return 0;\r\n    }\r\n\r\n### HTTP easy server\r\n\r\n    #include \"rinoo/rinoo.h\"\r\n\r\n    t_http_route routes[] = {\r\n        { \"/\", 200, RINOO_HTTP_ROUTE_STATIC, .content = \"<html><body><center>Welcome to RiNOO HTTP server!<br/><br/><a href=\\\"/motd\\\">motd</a></center><body></html>\" },\r\n        { \"/motd\", 200, RINOO_HTTP_ROUTE_FILE, .file = \"/etc/motd\" },\r\n        { NULL, 302, RINOO_HTTP_ROUTE_REDIRECT, .location = \"/\" }\r\n    };\r\n\r\n    int main()\r\n    {\r\n        t_sched *sched;\r\n\r\n        sched = rinoo_sched();\r\n        rinoo_http_easy_server(sched, 0, 4242, routes, sizeof(routes) / sizeof(*routes));\r\n        rinoo_sched_loop(sched);\r\n        rinoo_sched_destroy(sched);\r\n        return 0;\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}